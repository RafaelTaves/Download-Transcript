import os
import subprocess
from pathlib import Path
import whisper
from openai import OpenAI
from config import OPENAI_API_KEY  # Certifique-se de ter esse arquivo com sua chave

# CONFIGURA√á√ïES
CANAL_URL = "https://www.youtube.com/@inffelcursos3360"
PASTA_TRANSCRITOS = "videos_transcritos_inffelCursos"
PASTA_TRANSLITERADOS = "videos_transliterados_inffelCursos"

# Criar pastas se n√£o existirem
os.makedirs(PASTA_TRANSCRITOS, exist_ok=True)
os.makedirs(PASTA_TRANSLITERADOS, exist_ok=True)

# Prompt para a translitera√ß√£o
PROMPT_TEMPLATE = """
Tarefa:
Voc√™ √© um assistente especialista em transformar transcri√ß√µes de v√≠deos em uma documenta√ß√£o clara, organizada e objetiva, adequada para ser usada em um sistema de IA baseado em RAG.

Entrada:
Voc√™ receber√° uma transcri√ß√£o de v√≠deo, que pode conter informalidades, repeti√ß√µes ou interrup√ß√µes t√≠picas da fala natural.

Objetivo:
Sua tarefa √© transliterar essa transcri√ß√£o em um conte√∫do documental, bem estruturado, com t√≥picos claros, subt√≠tulos quando necess√°rio e sem linguagem coloquial. A ideia √© manter toda a informa√ß√£o essencial passada no v√≠deo, mas no formato de um texto t√©cnico ou explicativo, semelhante a um artigo, manual ou documenta√ß√£o de conhecimento.

Instru√ß√µes espec√≠ficas:
- Organize o conte√∫do em t√≥picos, subt√≥picos e par√°grafos coerentes.
- Elimine v√≠cios de linguagem e repeti√ß√µes.
- Conserve o sentido original da fala, mas com clareza e concis√£o.
- Quando poss√≠vel, use bullet points, enumera√ß√µes ou tabelas para facilitar a leitura.
- N√£o invente informa√ß√µes n√£o presentes na transcri√ß√£o.
- Todas as palavras encontradas como Einfel, fel, infel, ou termos relacionados devem ser substitu√≠das por 'Inffel' para manter a consist√™ncia com a marca.

Formato de sa√≠da:
Uma documenta√ß√£o clara, did√°tica e adequada para indexa√ß√£o e consulta por uma IA via RAG.

Agora, aqui est√° a transcri√ß√£o para ser processada:

{}
"""

# Instancia cliente da OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# Fun√ß√£o para transliterar o texto
def transliterar_transcricao(conteudo):
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "user", "content": PROMPT_TEMPLATE.format(conteudo)}
        ],
        temperature=0.6
    )
    return response.choices[0].message.content

# Etapa 1: Baixar os √°udios do canal
def baixar_audios():
    print("üîΩ Baixando os √°udios do canal...")
    subprocess.run([
        "yt-dlp",
        "-x",
        "--audio-format", "mp3",
        "-o", f"{PASTA_TRANSCRITOS}/%(title)s.%(ext)s",
        CANAL_URL
    ])
    print("‚úÖ Download conclu√≠do.")

# Etapa 2: Transcrever com Whisper
def transcrever_audios():
    print("üß† Carregando modelo Whisper...")
    model = whisper.load_model("small")

    print("üìù Iniciando transcri√ß√£o...")
    for audio_file in Path(PASTA_TRANSCRITOS).glob("*.mp3"):
        print(f"üîä Transcrevendo: {audio_file.name}")
        result = model.transcribe(str(audio_file), language="pt")

        transcript_path = audio_file.with_suffix(".txt")
        with open(transcript_path, "w", encoding="utf-8") as f:
            f.write(result["text"])
        print(f"‚úÖ Transcri√ß√£o salva: {transcript_path.name}")
    print("üìÑ Transcri√ß√µes finalizadas.")

# Etapa 3: Transliterar os textos
def transliterar_transcricoes():
    print("üìö Iniciando translitera√ß√£o...")
    for nome_arquivo in os.listdir(PASTA_TRANSCRITOS):
        if nome_arquivo.endswith(".txt") and not nome_arquivo.endswith("-Transliterado.txt"):
            caminho_arquivo = os.path.join(PASTA_TRANSCRITOS, nome_arquivo)
            with open(caminho_arquivo, "r", encoding="utf-8") as f:
                conteudo = f.read()

            print(f"üîÑ Processando: {nome_arquivo}")
            resultado = transliterar_transcricao(conteudo)

            nome_saida = nome_arquivo.replace(".txt", "-Transliterado.txt")
            caminho_saida = os.path.join(PASTA_TRANSLITERADOS, nome_saida)
            with open(caminho_saida, "w", encoding="utf-8") as f_out:
                f_out.write(resultado)
            print(f"‚úÖ Translitera√ß√£o salva: {nome_saida}")
    print("üìò Translitera√ß√£o finalizada.")

# Execu√ß√£o do fluxo completo
if __name__ == "__main__":
    baixar_audios()
    transcrever_audios()
    transliterar_transcricoes()
    print("üöÄ Translitera√ß√µes finalizadas com sucesso!")
